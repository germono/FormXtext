/*
 * generated by Xtext 2.21.0
 */
grammar InternalFix;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package oliv.form.xtext.fix.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package oliv.form.xtext.fix.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import oliv.form.xtext.fix.services.FixGrammarAccess;

}

@parser::members {

 	private FixGrammarAccess grammarAccess;

    public InternalFixParser(TokenStream input, FixGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected FixGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getCourbesCourbeParserRuleCall_0());
			}
			lv_Courbes_0_0=ruleCourbe
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"Courbes",
					lv_Courbes_0_0,
					"oliv.form.xtext.fix.Fix.Courbe");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleCourbe
entryRuleCourbe returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCourbeRule()); }
	iv_ruleCourbe=ruleCourbe
	{ $current=$iv_ruleCourbe.current; }
	EOF;

// Rule Courbe
ruleCourbe returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='*Courbe'
		{
			newLeafNode(otherlv_0, grammarAccess.getCourbeAccess().getCourbeKeyword_0());
		}
		this_SPACE_1=RULE_SPACE
		{
			newLeafNode(this_SPACE_1, grammarAccess.getCourbeAccess().getSPACETerminalRuleCall_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getCourbeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourbeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"oliv.form.xtext.fix.Fix.ID");
				}
			)
		)
		this_FDL_3=RULE_FDL
		{
			newLeafNode(this_FDL_3, grammarAccess.getCourbeAccess().getFDLTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCourbeAccess().getLignesLigneParserRuleCall_4_0());
				}
				lv_lignes_4_0=ruleLigne
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCourbeRule());
					}
					add(
						$current,
						"lignes",
						lv_lignes_4_0,
						"oliv.form.xtext.fix.Fix.Ligne");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleLigne
entryRuleLigne returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLigneRule()); }
	iv_ruleLigne=ruleLigne
	{ $current=$iv_ruleLigne.current; }
	EOF;

// Rule Ligne
ruleLigne returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_x_0_0=RULE_NOMBRE
				{
					newLeafNode(lv_x_0_0, grammarAccess.getLigneAccess().getXNOMBRETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLigneRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_0_0,
						"oliv.form.xtext.fix.Fix.NOMBRE");
				}
			)
		)
		(
			(
				lv_y_1_0=RULE_NOMBRE
				{
					newLeafNode(lv_y_1_0, grammarAccess.getLigneAccess().getYNOMBRETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLigneRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_1_0,
						"oliv.form.xtext.fix.Fix.NOMBRE");
				}
			)
		)
		this_FDL_2=RULE_FDL
		{
			newLeafNode(this_FDL_2, grammarAccess.getLigneAccess().getFDLTerminalRuleCall_2());
		}
	)
;

RULE_NOMBRE : (RULE_NOMBRE1|RULE_NOMBRE2|RULE_NOMBRE3|RULE_NOMBRE4|RULE_NOMBRE5|RULE_NOMBRE6|RULE_NOMBRE7|RULE_NOMBRE8);

fragment RULE_NOMBRE1 : RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_CHIFF1;

fragment RULE_CHIFF1 : '0'..'9';

fragment RULE_NOMBRE2 : RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_CHIFF2;

fragment RULE_CHIFF2 : '0'..'9' '0'..'9';

fragment RULE_NOMBRE3 : RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_CHIFF3;

fragment RULE_CHIFF3 : '0'..'9' '0'..'9' '0'..'9';

fragment RULE_NOMBRE4 : RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_CHIFF4;

fragment RULE_CHIFF4 : '0'..'9' '0'..'9' '0'..'9' '0'..'9';

fragment RULE_NOMBRE5 : RULE_SPACE RULE_SPACE RULE_SPACE RULE_CHIFF5;

fragment RULE_CHIFF5 : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9';

fragment RULE_NOMBRE6 : RULE_SPACE RULE_SPACE RULE_CHIFF6;

fragment RULE_CHIFF6 : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9';

fragment RULE_NOMBRE7 : RULE_SPACE RULE_CHIFF7;

fragment RULE_CHIFF7 : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9';

fragment RULE_NOMBRE8 : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9';

RULE_FDL : ('\r'? '\n')?;

RULE_SPACE : ' ';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : ('\t'|'\r'|'\n')+;
