/*
 * generated by Xtext 2.21.0
 */
package oliv.form.xtext.fix.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FixGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.Model");
		private final Assignment cCourbesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCourbesCourbeParserRuleCall_0 = (RuleCall)cCourbesAssignment.eContents().get(0);
		
		//Model:
		//	Courbes+=Courbe*;
		@Override public ParserRule getRule() { return rule; }
		
		//Courbes+=Courbe*
		public Assignment getCourbesAssignment() { return cCourbesAssignment; }
		
		//Courbe
		public RuleCall getCourbesCourbeParserRuleCall_0() { return cCourbesCourbeParserRuleCall_0; }
	}
	public class CourbeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.Courbe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCourbeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cFDLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cLignesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLignesLigneParserRuleCall_4_0 = (RuleCall)cLignesAssignment_4.eContents().get(0);
		
		//Courbe:
		//	'*Courbe' SPACE name=ID FDL
		//	lignes+=Ligne*;
		@Override public ParserRule getRule() { return rule; }
		
		//'*Courbe' SPACE name=ID FDL lignes+=Ligne*
		public Group getGroup() { return cGroup; }
		
		//'*Courbe'
		public Keyword getCourbeKeyword_0() { return cCourbeKeyword_0; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_1() { return cSPACETerminalRuleCall_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//FDL
		public RuleCall getFDLTerminalRuleCall_3() { return cFDLTerminalRuleCall_3; }
		
		//lignes+=Ligne*
		public Assignment getLignesAssignment_4() { return cLignesAssignment_4; }
		
		//Ligne
		public RuleCall getLignesLigneParserRuleCall_4_0() { return cLignesLigneParserRuleCall_4_0; }
	}
	public class LigneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.Ligne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXNOMBRETerminalRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Assignment cYAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cYNOMBRETerminalRuleCall_1_0 = (RuleCall)cYAssignment_1.eContents().get(0);
		private final RuleCall cFDLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Ligne:
		//	x=NOMBRE y=NOMBRE FDL;
		@Override public ParserRule getRule() { return rule; }
		
		//x=NOMBRE y=NOMBRE FDL
		public Group getGroup() { return cGroup; }
		
		//x=NOMBRE
		public Assignment getXAssignment_0() { return cXAssignment_0; }
		
		//NOMBRE
		public RuleCall getXNOMBRETerminalRuleCall_0_0() { return cXNOMBRETerminalRuleCall_0_0; }
		
		//y=NOMBRE
		public Assignment getYAssignment_1() { return cYAssignment_1; }
		
		//NOMBRE
		public RuleCall getYNOMBRETerminalRuleCall_1_0() { return cYNOMBRETerminalRuleCall_1_0; }
		
		//FDL
		public RuleCall getFDLTerminalRuleCall_2() { return cFDLTerminalRuleCall_2; }
	}
	
	
	private final ModelElements pModel;
	private final CourbeElements pCourbe;
	private final LigneElements pLigne;
	private final TerminalRule tNOMBRE;
	private final TerminalRule tNOMBRE1;
	private final TerminalRule tCHIFF1;
	private final TerminalRule tNOMBRE2;
	private final TerminalRule tCHIFF2;
	private final TerminalRule tNOMBRE3;
	private final TerminalRule tCHIFF3;
	private final TerminalRule tNOMBRE4;
	private final TerminalRule tCHIFF4;
	private final TerminalRule tNOMBRE5;
	private final TerminalRule tCHIFF5;
	private final TerminalRule tNOMBRE6;
	private final TerminalRule tCHIFF6;
	private final TerminalRule tNOMBRE7;
	private final TerminalRule tCHIFF7;
	private final TerminalRule tNOMBRE8;
	private final TerminalRule tFDL;
	private final TerminalRule tSPACE;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public FixGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pCourbe = new CourbeElements();
		this.pLigne = new LigneElements();
		this.tNOMBRE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.NOMBRE");
		this.tNOMBRE1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.NOMBRE1");
		this.tCHIFF1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.CHIFF1");
		this.tNOMBRE2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.NOMBRE2");
		this.tCHIFF2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.CHIFF2");
		this.tNOMBRE3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.NOMBRE3");
		this.tCHIFF3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.CHIFF3");
		this.tNOMBRE4 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.NOMBRE4");
		this.tCHIFF4 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.CHIFF4");
		this.tNOMBRE5 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.NOMBRE5");
		this.tCHIFF5 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.CHIFF5");
		this.tNOMBRE6 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.NOMBRE6");
		this.tCHIFF6 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.CHIFF6");
		this.tNOMBRE7 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.NOMBRE7");
		this.tCHIFF7 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.CHIFF7");
		this.tNOMBRE8 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.NOMBRE8");
		this.tFDL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.FDL");
		this.tSPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.SPACE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oliv.form.xtext.fix.Fix.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("oliv.form.xtext.fix.Fix".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	Courbes+=Courbe*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Courbe:
	//	'*Courbe' SPACE name=ID FDL
	//	lignes+=Ligne*;
	public CourbeElements getCourbeAccess() {
		return pCourbe;
	}
	
	public ParserRule getCourbeRule() {
		return getCourbeAccess().getRule();
	}
	
	//Ligne:
	//	x=NOMBRE y=NOMBRE FDL;
	public LigneElements getLigneAccess() {
		return pLigne;
	}
	
	public ParserRule getLigneRule() {
		return getLigneAccess().getRule();
	}
	
	//terminal NOMBRE:
	//	NOMBRE1 | NOMBRE2 | NOMBRE3 | NOMBRE4 | NOMBRE5 | NOMBRE6 | NOMBRE7 | NOMBRE8;
	public TerminalRule getNOMBRERule() {
		return tNOMBRE;
	}
	
	//terminal NOMBRE1:
	//	SPACE SPACE SPACE SPACE SPACE SPACE SPACE CHIFF1;
	public TerminalRule getNOMBRE1Rule() {
		return tNOMBRE1;
	}
	
	//terminal CHIFF1 returns ecore::EInt:
	//	'0'..'9';
	public TerminalRule getCHIFF1Rule() {
		return tCHIFF1;
	}
	
	//terminal NOMBRE2:
	//	SPACE SPACE SPACE SPACE SPACE SPACE CHIFF2;
	public TerminalRule getNOMBRE2Rule() {
		return tNOMBRE2;
	}
	
	//terminal CHIFF2 returns ecore::EInt:
	//	'0'..'9' '0'..'9';
	public TerminalRule getCHIFF2Rule() {
		return tCHIFF2;
	}
	
	//terminal NOMBRE3:
	//	SPACE SPACE SPACE SPACE SPACE CHIFF3;
	public TerminalRule getNOMBRE3Rule() {
		return tNOMBRE3;
	}
	
	//terminal CHIFF3 returns ecore::EInt:
	//	'0'..'9' '0'..'9' '0'..'9';
	public TerminalRule getCHIFF3Rule() {
		return tCHIFF3;
	}
	
	//terminal NOMBRE4:
	//	SPACE SPACE SPACE SPACE CHIFF4;
	public TerminalRule getNOMBRE4Rule() {
		return tNOMBRE4;
	}
	
	//terminal CHIFF4 returns ecore::EInt:
	//	'0'..'9' '0'..'9' '0'..'9' '0'..'9';
	public TerminalRule getCHIFF4Rule() {
		return tCHIFF4;
	}
	
	//terminal NOMBRE5:
	//	SPACE SPACE SPACE CHIFF5;
	public TerminalRule getNOMBRE5Rule() {
		return tNOMBRE5;
	}
	
	//terminal CHIFF5 returns ecore::EInt:
	//	'0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9';
	public TerminalRule getCHIFF5Rule() {
		return tCHIFF5;
	}
	
	//terminal NOMBRE6:
	//	SPACE SPACE CHIFF6;
	public TerminalRule getNOMBRE6Rule() {
		return tNOMBRE6;
	}
	
	//terminal CHIFF6 returns ecore::EInt:
	//	'0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9';
	public TerminalRule getCHIFF6Rule() {
		return tCHIFF6;
	}
	
	//terminal NOMBRE7:
	//	SPACE CHIFF7;
	public TerminalRule getNOMBRE7Rule() {
		return tNOMBRE7;
	}
	
	//terminal CHIFF7 returns ecore::EInt:
	//	'0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9';
	public TerminalRule getCHIFF7Rule() {
		return tCHIFF7;
	}
	
	//terminal NOMBRE8 returns ecore::EInt:
	//	'0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9';
	public TerminalRule getNOMBRE8Rule() {
		return tNOMBRE8;
	}
	
	//terminal FDL:
	//	'\r'? '\n'?;
	public TerminalRule getFDLRule() {
		return tFDL;
	}
	
	//terminal SPACE:
	//	' ';
	public TerminalRule getSPACERule() {
		return tSPACE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	'\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
