/*
 * generated by Xtext 2.21.0
 */
grammar InternalFix;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package oliv.form.xtext.fix.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package oliv.form.xtext.fix.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import oliv.form.xtext.fix.services.FixGrammarAccess;

}
@parser::members {
	private FixGrammarAccess grammarAccess;

	public void setGrammarAccess(FixGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getCourbesAssignment()); }
		(rule__Model__CourbesAssignment)*
		{ after(grammarAccess.getModelAccess().getCourbesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCourbe
entryRuleCourbe
:
{ before(grammarAccess.getCourbeRule()); }
	 ruleCourbe
{ after(grammarAccess.getCourbeRule()); } 
	 EOF 
;

// Rule Courbe
ruleCourbe 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCourbeAccess().getGroup()); }
		(rule__Courbe__Group__0)
		{ after(grammarAccess.getCourbeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLigne
entryRuleLigne
:
{ before(grammarAccess.getLigneRule()); }
	 ruleLigne
{ after(grammarAccess.getLigneRule()); } 
	 EOF 
;

// Rule Ligne
ruleLigne 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLigneAccess().getGroup()); }
		(rule__Ligne__Group__0)
		{ after(grammarAccess.getLigneAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Courbe__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Courbe__Group__0__Impl
	rule__Courbe__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Courbe__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCourbeAccess().getCourbeKeyword_0()); }
	'*Courbe'
	{ after(grammarAccess.getCourbeAccess().getCourbeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Courbe__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Courbe__Group__1__Impl
	rule__Courbe__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Courbe__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCourbeAccess().getSPACETerminalRuleCall_1()); }
	RULE_SPACE
	{ after(grammarAccess.getCourbeAccess().getSPACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Courbe__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Courbe__Group__2__Impl
	rule__Courbe__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Courbe__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCourbeAccess().getNameAssignment_2()); }
	(rule__Courbe__NameAssignment_2)
	{ after(grammarAccess.getCourbeAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Courbe__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Courbe__Group__3__Impl
	rule__Courbe__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Courbe__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCourbeAccess().getFDLTerminalRuleCall_3()); }
	RULE_FDL
	{ after(grammarAccess.getCourbeAccess().getFDLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Courbe__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Courbe__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Courbe__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCourbeAccess().getLignesAssignment_4()); }
	(rule__Courbe__LignesAssignment_4)*
	{ after(grammarAccess.getCourbeAccess().getLignesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ligne__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ligne__Group__0__Impl
	rule__Ligne__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneAccess().getXAssignment_0()); }
	(rule__Ligne__XAssignment_0)
	{ after(grammarAccess.getLigneAccess().getXAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ligne__Group__1__Impl
	rule__Ligne__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneAccess().getYAssignment_1()); }
	(rule__Ligne__YAssignment_1)
	{ after(grammarAccess.getLigneAccess().getYAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ligne__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneAccess().getFDLTerminalRuleCall_2()); }
	RULE_FDL
	{ after(grammarAccess.getLigneAccess().getFDLTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__CourbesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getCourbesCourbeParserRuleCall_0()); }
		ruleCourbe
		{ after(grammarAccess.getModelAccess().getCourbesCourbeParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Courbe__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCourbeAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getCourbeAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Courbe__LignesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCourbeAccess().getLignesLigneParserRuleCall_4_0()); }
		ruleLigne
		{ after(grammarAccess.getCourbeAccess().getLignesLigneParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__XAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLigneAccess().getXNOMBRETerminalRuleCall_0_0()); }
		RULE_NOMBRE
		{ after(grammarAccess.getLigneAccess().getXNOMBRETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ligne__YAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLigneAccess().getYNOMBRETerminalRuleCall_1_0()); }
		RULE_NOMBRE
		{ after(grammarAccess.getLigneAccess().getYNOMBRETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NOMBRE : (RULE_NOMBRE1|RULE_NOMBRE2|RULE_NOMBRE3|RULE_NOMBRE4|RULE_NOMBRE5|RULE_NOMBRE6|RULE_NOMBRE7|RULE_NOMBRE8);

fragment RULE_NOMBRE1 : RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_CHIFF1;

fragment RULE_CHIFF1 : '0'..'9';

fragment RULE_NOMBRE2 : RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_CHIFF2;

fragment RULE_CHIFF2 : '0'..'9' '0'..'9';

fragment RULE_NOMBRE3 : RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_CHIFF3;

fragment RULE_CHIFF3 : '0'..'9' '0'..'9' '0'..'9';

fragment RULE_NOMBRE4 : RULE_SPACE RULE_SPACE RULE_SPACE RULE_SPACE RULE_CHIFF4;

fragment RULE_CHIFF4 : '0'..'9' '0'..'9' '0'..'9' '0'..'9';

fragment RULE_NOMBRE5 : RULE_SPACE RULE_SPACE RULE_SPACE RULE_CHIFF5;

fragment RULE_CHIFF5 : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9';

fragment RULE_NOMBRE6 : RULE_SPACE RULE_SPACE RULE_CHIFF6;

fragment RULE_CHIFF6 : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9';

fragment RULE_NOMBRE7 : RULE_SPACE RULE_CHIFF7;

fragment RULE_CHIFF7 : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9';

fragment RULE_NOMBRE8 : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '0'..'9';

RULE_FDL : ('\r'? '\n')?;

RULE_SPACE : ' ';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : ('\t'|'\r'|'\n')+;
