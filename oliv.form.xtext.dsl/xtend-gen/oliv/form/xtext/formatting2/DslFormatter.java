/**
 * generated by Xtext 2.21.0
 */
package oliv.form.xtext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import oliv.form.xtext.dsl.Expression;
import oliv.form.xtext.dsl.Import;
import oliv.form.xtext.dsl.Model;
import oliv.form.xtext.dsl.PackageDeclaration;
import oliv.form.xtext.dsl.Truc;
import oliv.form.xtext.dsl.VariableCalcule;
import oliv.form.xtext.services.DslGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class DslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DslGrammarAccess _dslGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    document.<PackageDeclaration>format(model.getPackage());
    EList<Import> _imports = model.getImports();
    for (final Import _import : _imports) {
      document.<Import>format(_import);
    }
    EList<Truc> _variables = model.getVariables();
    for (final Truc truc : _variables) {
      document.<Truc>format(truc);
    }
  }
  
  protected void _format(final VariableCalcule variableCalcule, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<VariableCalcule>prepend(variableCalcule, _function);
    document.<Expression>format(variableCalcule.getExpression());
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<VariableCalcule>surround(variableCalcule, _function_1);
  }
  
  public void format(final Object variableCalcule, final IFormattableDocument document) {
    if (variableCalcule instanceof VariableCalcule) {
      _format((VariableCalcule)variableCalcule, document);
      return;
    } else if (variableCalcule instanceof XtextResource) {
      _format((XtextResource)variableCalcule, document);
      return;
    } else if (variableCalcule instanceof Model) {
      _format((Model)variableCalcule, document);
      return;
    } else if (variableCalcule instanceof EObject) {
      _format((EObject)variableCalcule, document);
      return;
    } else if (variableCalcule == null) {
      _format((Void)null, document);
      return;
    } else if (variableCalcule != null) {
      _format(variableCalcule, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(variableCalcule, document).toString());
    }
  }
}
