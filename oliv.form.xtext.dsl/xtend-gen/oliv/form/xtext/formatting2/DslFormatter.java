/**
 * generated by Xtext 2.21.0
 */
package oliv.form.xtext.formatting2;

import java.util.Arrays;
import oliv.form.xtext.dsl.MDslPackage;
import oliv.form.xtext.dsl.Model;
import oliv.form.xtext.dsl.VariableCalcule;
import oliv.form.xtext.dsl.VariableDirect;
import oliv.form.xtext.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslFormatter implements /* AbstractFormatter2 */MDslPackage.Literals {
  /* @Inject
   */private DslGrammarAccess _dslGrammarAccess;
  
  protected void _format(final Model model, final /* IFormattableDocument */Object document) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field imports is undefined for the type Model"
      + "\nThe method or field variables is undefined for the type Model"
      + "\nInvalid number of arguments. The method format(Object, IFormattableDocument) is not applicable for the arguments (PackageDeclaration)"
      + "\nThe method format(Object, IFormattableDocument) from the type DslFormatter refers to the missing type IFormattableDocument"
      + "\nformat cannot be resolved"
      + "\nformat cannot be resolved");
  }
  
  protected void _format(final VariableCalcule variableCalcule, final /* IFormattableDocument */Object document) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method prepend(Object) is undefined for the type VariableCalcule"
      + "\nThe method or field newLine is undefined"
      + "\nThe method surround(Object) is undefined for the type VariableCalcule"
      + "\nThe method or field newLine is undefined"
      + "\nInvalid number of arguments. The method format(Object, IFormattableDocument) is not applicable for the arguments (Expression)"
      + "\nThe method format(Object, IFormattableDocument) from the type DslFormatter refers to the missing type IFormattableDocument");
  }
  
  protected void _format(final VariableDirect variableDirect, final /* IFormattableDocument */Object document) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method prepend(Object) is undefined for the type VariableDirect"
      + "\nThe method or field newLine is undefined"
      + "\nThe method or field regionFor is undefined for the type VariableDirect"
      + "\nThe method or field oneSpace is undefined"
      + "\nThe method or field regionFor is undefined for the type VariableDirect"
      + "\nThe method newLines(int) is undefined"
      + "\nThe method or field regionFor is undefined for the type VariableDirect"
      + "\nThe method or field newLine is undefined"
      + "\nThe method or field regionFor is undefined for the type VariableDirect"
      + "\nThe method space(String) is undefined"
      + "\nThe method or field regionFor is undefined for the type VariableDirect"
      + "\nThe method or field VARIABLE_DIRECT__ALPHA is undefined"
      + "\nThe method space(String) is undefined"
      + "\nThe method surround(Object) is undefined for the type VariableDirect"
      + "\nThe method or field newLine is undefined"
      + "\nkeyword cannot be resolved"
      + "\nappend cannot be resolved"
      + "\nkeyword cannot be resolved"
      + "\nprepend cannot be resolved"
      + "\nkeyword cannot be resolved"
      + "\nprepend cannot be resolved"
      + "\nkeyword cannot be resolved"
      + "\nprepend cannot be resolved"
      + "\nfeature cannot be resolved"
      + "\nappend cannot be resolved");
  }
  
  public void format(final Object variableCalcule, final IFormattableDocument document) {
    if (variableCalcule instanceof VariableCalcule
         && document != null) {
      _format((VariableCalcule)variableCalcule, document);
      return;
    } else if (variableCalcule instanceof VariableDirect
         && document != null) {
      _format((VariableDirect)variableCalcule, document);
      return;
    } else if (variableCalcule instanceof Model
         && document != null) {
      _format((Model)variableCalcule, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(variableCalcule, document).toString());
    }
  }
}
