/*
 * generated by Xtext 2.21.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package oliv.form.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package oliv.form.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import oliv.form.xtext.services.DslGrammarAccess;

}
@parser::members {
	private DslGrammarAccess grammarAccess;

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getVariablesAssignment()); }
		(rule__Model__VariablesAssignment)*
		{ after(grammarAccess.getModelAccess().getVariablesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTruc
entryRuleTruc
:
{ before(grammarAccess.getTrucRule()); }
	 ruleTruc
{ after(grammarAccess.getTrucRule()); } 
	 EOF 
;

// Rule Truc
ruleTruc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrucAccess().getAlternatives()); }
		(rule__Truc__Alternatives)
		{ after(grammarAccess.getTrucAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAutre
entryRuleAutre
:
{ before(grammarAccess.getAutreRule()); }
	 ruleAutre
{ after(grammarAccess.getAutreRule()); } 
	 EOF 
;

// Rule Autre
ruleAutre 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAutreAccess().getGroup()); }
		(rule__Autre__Group__0)
		{ after(grammarAccess.getAutreAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDirect
entryRuleVariableDirect
:
{ before(grammarAccess.getVariableDirectRule()); }
	 ruleVariableDirect
{ after(grammarAccess.getVariableDirectRule()); } 
	 EOF 
;

// Rule VariableDirect
ruleVariableDirect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDirectAccess().getGroup()); }
		(rule__VariableDirect__Group__0)
		{ after(grammarAccess.getVariableDirectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableCalcule
entryRuleVariableCalcule
:
{ before(grammarAccess.getVariableCalculeRule()); }
	 ruleVariableCalcule
{ after(grammarAccess.getVariableCalculeRule()); } 
	 EOF 
;

// Rule VariableCalcule
ruleVariableCalcule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableCalculeAccess().getGroup()); }
		(rule__VariableCalcule__Group__0)
		{ after(grammarAccess.getVariableCalculeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAdditionParserRuleCall()); }
		ruleAddition
		{ after(grammarAccess.getExpressionAccess().getAdditionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReel
entryRuleReel
:
{ before(grammarAccess.getReelRule()); }
	 ruleReel
{ after(grammarAccess.getReelRule()); } 
	 EOF 
;

// Rule Reel
ruleReel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReelAccess().getGroup()); }
		(rule__Reel__Group__0)
		{ after(grammarAccess.getReelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Truc__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrucAccess().getVariableDirectParserRuleCall_0()); }
		ruleVariableDirect
		{ after(grammarAccess.getTrucAccess().getVariableDirectParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTrucAccess().getVariableCalculeParserRuleCall_1()); }
		ruleVariableCalcule
		{ after(grammarAccess.getTrucAccess().getVariableCalculeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTrucAccess().getAutreParserRuleCall_2()); }
		ruleAutre
		{ after(grammarAccess.getTrucAccess().getAutreParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
		(rule__Addition__Group_1_0_0__0)
		{ after(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
		(rule__Addition__Group_1_0_1__0)
		{ after(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
		(rule__Multiplication__Group_1_0_0__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
		(rule__Multiplication__Group_1_0_1__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
		(rule__PrimaryExpression__Group_0__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
		(rule__PrimaryExpression__Group_1__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
		(rule__PrimaryExpression__Group_2__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reel__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReelAccess().getEXT_INTTerminalRuleCall_1_1_0()); }
		RULE_EXT_INT
		{ after(grammarAccess.getReelAccess().getEXT_INTTerminalRuleCall_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getReelAccess().getINTTerminalRuleCall_1_1_1()); }
		RULE_INT
		{ after(grammarAccess.getReelAccess().getINTTerminalRuleCall_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Autre__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Autre__Group__0__Impl
	rule__Autre__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Autre__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAutreAccess().getAutreKeyword_0()); }
	'Autre'
	{ after(grammarAccess.getAutreAccess().getAutreKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Autre__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Autre__Group__1__Impl
	rule__Autre__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Autre__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAutreAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getAutreAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Autre__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Autre__Group__2__Impl
	rule__Autre__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Autre__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAutreAccess().getBobKeyword_2()); }
	'Bob'
	{ after(grammarAccess.getAutreAccess().getBobKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Autre__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Autre__Group__3__Impl
	rule__Autre__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Autre__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAutreAccess().getBobAssignment_3()); }
	(rule__Autre__BobAssignment_3)
	{ after(grammarAccess.getAutreAccess().getBobAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Autre__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Autre__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Autre__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAutreAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getAutreAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDirect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDirect__Group__0__Impl
	rule__VariableDirect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDirectAccess().getVariableKeyword_0()); }
	'Variable'
	{ after(grammarAccess.getVariableDirectAccess().getVariableKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDirect__Group__1__Impl
	rule__VariableDirect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDirectAccess().getNameAssignment_1()); }
	(rule__VariableDirect__NameAssignment_1)
	{ after(grammarAccess.getVariableDirectAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDirect__Group__2__Impl
	rule__VariableDirect__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDirectAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getVariableDirectAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDirect__Group__3__Impl
	rule__VariableDirect__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDirectAccess().getAlphaKeyword_3()); }
	'Alpha'
	{ after(grammarAccess.getVariableDirectAccess().getAlphaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDirect__Group__4__Impl
	rule__VariableDirect__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDirectAccess().getColonKeyword_4()); }
	':'
	{ after(grammarAccess.getVariableDirectAccess().getColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDirect__Group__5__Impl
	rule__VariableDirect__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDirectAccess().getAlphaAssignment_5()); }
	(rule__VariableDirect__AlphaAssignment_5)
	{ after(grammarAccess.getVariableDirectAccess().getAlphaAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDirect__Group__6__Impl
	rule__VariableDirect__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDirectAccess().getBetaKeyword_6()); }
	'Beta'
	{ after(grammarAccess.getVariableDirectAccess().getBetaKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDirect__Group__7__Impl
	rule__VariableDirect__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDirectAccess().getColonKeyword_7()); }
	':'
	{ after(grammarAccess.getVariableDirectAccess().getColonKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDirect__Group__8__Impl
	rule__VariableDirect__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDirectAccess().getBetaAssignment_8()); }
	(rule__VariableDirect__BetaAssignment_8)
	{ after(grammarAccess.getVariableDirectAccess().getBetaAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDirect__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDirectAccess().getRightCurlyBracketKeyword_9()); }
	'}'
	{ after(grammarAccess.getVariableDirectAccess().getRightCurlyBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableCalcule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableCalcule__Group__0__Impl
	rule__VariableCalcule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCalcule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableCalculeAccess().getVariableCalculeKeyword_0()); }
	'VariableCalcule'
	{ after(grammarAccess.getVariableCalculeAccess().getVariableCalculeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCalcule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableCalcule__Group__1__Impl
	rule__VariableCalcule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCalcule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableCalculeAccess().getNameAssignment_1()); }
	(rule__VariableCalcule__NameAssignment_1)
	{ after(grammarAccess.getVariableCalculeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCalcule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableCalcule__Group__2__Impl
	rule__VariableCalcule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCalcule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableCalculeAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getVariableCalculeAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCalcule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableCalcule__Group__3__Impl
	rule__VariableCalcule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCalcule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableCalculeAccess().getExpressionAssignment_3()); }
	(rule__VariableCalcule__ExpressionAssignment_3)
	{ after(grammarAccess.getVariableCalculeAccess().getExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCalcule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableCalcule__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCalcule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableCalculeAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getVariableCalculeAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
	(rule__Addition__Alternatives_1_0)
	{ after(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
	(rule__Addition__RightAssignment_1_1)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0_0__0__Impl
	rule__Addition__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }
	'+'
	{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0_1__0__Impl
	rule__Addition__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }
	'-'
	{ after(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
	{ after(grammarAccess.getMultiplicationAccess().getPrimaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
	(rule__Multiplication__Alternatives_1_0)
	{ after(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
	(rule__Multiplication__RightAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1_0_0__0__Impl
	rule__Multiplication__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }
	'*'
	{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1_0_1__0__Impl
	rule__Multiplication__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }
	'/'
	{ after(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__0__Impl
	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__1__Impl
	rule__PrimaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1__0__Impl
	rule__PrimaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getNumberLiteralAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryExpressionAccess().getNumberLiteralAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_1_1()); }
	(rule__PrimaryExpression__ValueAssignment_1_1)
	{ after(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__0__Impl
	rule__PrimaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getVariableExpressionAction_2_0()); }
	()
	{ after(grammarAccess.getPrimaryExpressionAccess().getVariableExpressionAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_2_1()); }
	(rule__PrimaryExpression__ValueAssignment_2_1)
	{ after(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reel__Group__0__Impl
	rule__Reel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReelAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getReelAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReelAccess().getGroup_1()); }
	(rule__Reel__Group_1__0)?
	{ after(grammarAccess.getReelAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reel__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reel__Group_1__0__Impl
	rule__Reel__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reel__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReelAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getReelAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reel__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reel__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reel__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReelAccess().getAlternatives_1_1()); }
	(rule__Reel__Alternatives_1_1)
	{ after(grammarAccess.getReelAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__VariablesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getVariablesTrucParserRuleCall_0()); }
		ruleTruc
		{ after(grammarAccess.getModelAccess().getVariablesTrucParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Autre__BobAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAutreAccess().getBobReelParserRuleCall_3_0()); }
		ruleReel
		{ after(grammarAccess.getAutreAccess().getBobReelParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDirectAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDirectAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__AlphaAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDirectAccess().getAlphaReelParserRuleCall_5_0()); }
		ruleReel
		{ after(grammarAccess.getVariableDirectAccess().getAlphaReelParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDirect__BetaAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDirectAccess().getBetaReelParserRuleCall_8_0()); }
		ruleReel
		{ after(grammarAccess.getVariableDirectAccess().getBetaReelParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCalcule__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableCalculeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableCalculeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCalcule__ExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableCalculeAccess().getExpressionExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getVariableCalculeAccess().getExpressionExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightPrimaryExpressionParserRuleCall_1_1_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getMultiplicationAccess().getRightPrimaryExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getValueReelParserRuleCall_1_1_0()); }
		ruleReel
		{ after(grammarAccess.getPrimaryExpressionAccess().getValueReelParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getValueVariableCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getPrimaryExpressionAccess().getValueVariableIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPrimaryExpressionAccess().getValueVariableIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getPrimaryExpressionAccess().getValueVariableCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_EXT_INT : RULE_INT ('e'|'E') ('-'|'+')? RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
